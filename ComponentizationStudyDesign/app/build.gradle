plugins {
    id 'com.android.application'
}

// 赋值与引用
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies

android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion

    defaultConfig {
        applicationId appId.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值（必须是String）
        // 为什么需要定义这个？因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        // 切记：不能在android根节点，只能在defaultConfig或buildTypes节点下
        // 用isRelease变量，标识当前整个项目是集成化模式还是组件化模式
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))

        // 在gradle文件中配置选项参数值（用于APT传参接收）
        // 切记：必须写在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }
    }

    buildTypes {
        debug{
            buildConfigField("String", "url", "\"${url.debug}\"");
        }
        release {
            minifyEnabled false
            buildConfigField("String", "url", "\"${url.release}\"");
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    // 标准写法
    //implementation group:"androidx.appcompat", name:"appcompat", version:"1.1.0"

    // 简写
    //implementation 'androidx.appcompat:appcompat:1.1.0'

    // 最简洁的方法
    support.each {k, v->implementation v}
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // 公共基础库
    implementation project(":common")

    // 注解，引入annotation
    implementation project(':arouter_annotation')

    // 注解处理器，处理@ARouter注解
    annotationProcessor project(':arouter_compiler')

    // 如果是发布版本，说明是集成化模式，各个模块不能独立运行了
    if(isRelease){
        implementation project(":order")
        implementation project(":personal")
    }
}